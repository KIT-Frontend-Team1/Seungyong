

1. FLUX 패턴에 대하여 설명해보세요
    -애플리케이션의 규모가 커져서 view와 model이 여러개가 꼬이는 문제를 해결하기위해서 등장
    -Flux는 사용자 입력을 기반으로 Action을 만들고 Action을 Dispatcher에 
    전달하여 Store(Model)의 데이터를 변경한 뒤 View에 반영하는 
    단방향의 흐름으로 애플리케이션을 만드는 아키텍처입니다

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
    -useState의 SetState 함수를 여러번 사용할때 reducer로 로직을 분리해서 다른곳에서도 쉽게 재사용이 가능하다.
    (2) useContext
    -중간에 코드가 변경되면 전부 다 찾아가서 변경해줘야한다. 또한 해당 데이터가 필요하지도 않은 컴포넌트에도 
    데이터가 전달되어 불필요하게 코드가 늘어나는것을 막기 위해서

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
    -Store라는 곳에서 전체를 관리하게 만들어서 유지보수를 편하게하기 위해서 사용한다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요
    -한번만 사용한다면 굳이 재사용하게 만들 필요는 없다고 생각한다.
    -순환을  action -> dispatcher -> model -> view -> action순으로 끊김없이 돌아가서 순환이 꼬이지 않는다.