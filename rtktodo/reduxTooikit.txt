ConfigureStore 
  - Redux의 store를 설정하기 위한 간소화된 API입니다. 
  - 기본적인 Redux 설정을 자동으로 처리해주며,
  - Redux DevTools Extension을 쉽게 사용할 수 있도록 지원합니다.

  ex)
    import { configureStore } from '@reduxjs/toolkit';
    import rootReducer from './reducers';

    const store = configureStore({
      reducer: rootReducer
    });

createAction 
  - 액션 생성자를 간편하게 만들어주는 함수입니다. 
  - createAction은 액션 타입을 정의하고 해당 액션을 생성하는 액션 생성자 함수를 생성합니다.

  ex)
    import { createAction } from '@reduxjs/toolkit';

    const increment = createAction('INCREMENT');
    const decrement = createAction('DECREMENT');

    store.dispatch(increment()); // { type: 'INCREMENT' }
    store.dispatch(decrement()); // { type: 'DECREMENT' }

createReducer 
  - 리듀서를 간편하게 작성할 수 있도록 도와주는 함수입니다. 
  - createReducer는 기존의 switch 문 대신 객체 형태로 리듀서를 작성할 수 있게 해줍니다.

  ex)
    import { createReducer } from '@reduxjs/toolkit';

    const initialState = { count: 0 };

    const counterReducer = createReducer(initialState, {
      INCREMENT: (state) => {
        state.count += 1;
      },
      DECREMENT: (state) => {
        state.count -= 1;
      }
    });

    store.dispatch({ type: 'INCREMENT' });
    console.log(store.getState().count); // 1

createSlice 
  - createAction과 createReducer를 결합한 기능으로, 
  - 슬라이스(reducer, action, action creator)를 한 번에 생성할 수 있습니다. 
  - 자동으로 액션 타입과 액션 생성자 함수를 생성해주며, 리듀서를 객체 형태로 작성할 수 있습니다.

  ex)
    import { createSlice } from '@reduxjs/toolkit';

    const counterSlice = createSlice({
      name: 'counter',
      initialState: { count: 0 },
      reducers: {
        increment: (state) => {
          state.count += 1;
        },
        decrement: (state) => {
          state.count -= 1;
        }
      }
    });

    store.dispatch(counterSlice.actions.increment());
    console.log(store.getState().counter.count);

immer.js 통합 
  - Redux Toolkit은 내부적으로 immer.js를 사용하여 불변성을 유지하는 작업을 자동으로 처리합니다. 
  - 따라서 상태를 직접적으로 수정해도 되며, Redux Toolkit